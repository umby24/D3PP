name: GitHub Actions Demo
on: [push]

jobs:
  "Docker-Ubuntu":
    strategy:
      fail-fast: false
      matrix:
        version:
          - "21.10"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: docker build --tag build:ubuntu-${{ matrix.version }} --build-arg version=${{ matrix.version }} docker/ubuntu
        name: "docker build"
      - run: docker run --detach --interactive --name build --volume $PWD:/D3PP build:ubuntu-${{ matrix.version }}
        name: "Docker run"
      - run: docker exec -t build /run_cmake.sh
        name: "cmake"
      - run: docker exec -t build /run_compile.sh
        name: "make"
      - run: docker exec -t build ls /
        name: "debug"
      - run: docker cp build:/tmp/D3PP ${{ github.workspace }}/D3PP
        name: "Copy Files"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
            name: D3PP-docker ${{ matrix.version }}
            path: ${{ github.workspace }}/D3PP
#  Windows-Build:
#    runs-on: windows-latest
#    steps:
#      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#      - name: Check out repository code
#        uses: actions/checkout@v2
#        with:
#          submodules: true
#      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#
#      - name: Install vcpkg dependencies
#        run: vcpkg install Lua:x64-windows SQLite3:x64-windows zlib:x64-windows
#
#      - name: Create build directory
#        run: cmake -E make_directory ${{github.workspace}}/build
#      - name: Prepare CMake
#        working-directory: ${{ github.workspace }}/build
#        run: cmake "$Env:GITHUB_WORKSPACE" "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
#      - name: Build
#        working-directory: ${{ github.workspace }}/build
#        run: cmake --build . --config Release --verbose
#      - name: Create Artifacts
#        run: |
#          mkdir artifacts && cp build/D3PP.exe artifacts/D3PP.exe
#      - name: Upload artifacts
#        uses: actions/upload-artifact@v3
#        with:
#            name: D3PP-Win64
#            path: ${{ github.workspace }}/artifacts
#      - run: echo "üçè This job's status is ${{ job.status }}."

#  Linux-Build:
#    runs-on: ubuntu-latest
#    steps:
#      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#      - name: Check out repository code
#        uses: actions/checkout@v2
#        with:
#          submodules: true
#      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#      - name: Install Deps
#        run: sudo apt-get update && sudo apt-get -y install sqlite3 libc6 libstdc++6 cmake
#      - name: Download Latest Lua
#        run: curl https://www.lua.org/ftp/lua-5.4.4.tar.gz --output lua-5.4.4.tar.gz
#      - name: Unpack Lua
#        run: tar -zxf lua-5.4.4.tar.gz
#      - name: Install Lua
#        run: cd lua-5.4.4 && make all test && sudo make install
#      - name: Create Symlinks
#        run: sudo ln -s /lib/x86_64-linux-gnu/liblua5.4.so.0.0.0 /lib/x86_64-linux-gnu/liblua-5.4.so
#      - name: Cmake Build
#        run: |
#          mkdir build && cd build && cmake ../ && make
#      - name: Run Unit Tests
#        continue-on-error: true
#        run: |
#          cd build && ./hello_test
#      - name: Create Artifacts
#        run: |
#          mkdir artifacts && cp build/D3PP artifacts/D3PP
#      - name: Upload artifacts
#        uses: actions/upload-artifact@v3
#        with:
#            name: D3PP
#            path: ${{ github.workspace }}/artifacts
#      - run: echo "üçè This job's status is ${{ job.status }}."
